options{    static = false;}PARSER_BEGIN(ExpParser)package parser;import java.io.StringReader ;import expr.ExpressionFactoryI ;import expr.Expression ;

class ExpParser{	    private ExpressionFactoryI factory ; ;        static Expression parse( String str, ExpressionFactoryI factory )        throws ParseException, TokenMgrError, NumberFormatException    {        ExpParser parser = new ExpParser( new StringReader( str )) ;        parser.factory = factory ;        return parser.start() ;    }}PARSER_END(ExpParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < LPAR : "(" >| < RPAR : ")" >| < X : "x" >| < SIN : "sin" >| < COS : "cos" >| < TAN : "tan" >| < LN : "ln" >| < EXP : "exp" >| < PI: "pi" | "\u03C0" >| < E: "e" >}TOKEN :{  < CONSTANT : <MANTISSA> (<EXPONENT>)? > | < #EXPONENT : ("e" | "E") (<DIGIT>)+ >| < #MANTISSA : (< DIGIT >)+ ("." (< DIGIT >)*)?              | (< DIGIT >)* "." (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}Expression start() : {	Expression a ;} {	a = E() <EOF>	{return a ; }}Expression E() : {	Expression a, b ;} {    a = T()    (    	"+" b = T()    	{ a = factory.add( a, b); }    |    	"-" b = T()    	{ a = factory.subtract( a, b) ; }    )*    {return a ; }}Expression T() : {	Expression a, b ;} {    a = F()    (    	"*" b = F()    	{ a = factory.multiply( a, b); }    |    	b = P()    	{ a = factory.multiply( a, b); }    |    	"/" b = F()    	{ a = factory.divide( a, b) ; }    )*    {return a ; }}Expression F() : {	Expression a ;	Token tk ;} {    "-" a = P()            {return factory.parenthesized(                                       factory.subtract(factory.constant(0.0), a) ) ; }|	a = P()                {return a ; }}Expression P() : {	Expression a ;	Token tk ;} {	<X>                    {return factory.x() ; }|	tk = <CONSTANT>        {return factory.constant( Double.parseDouble( tk.image ) ) ; }|	"(" a = E() ")"        {return factory.parenthesized( a ) ;}|	<SIN> a = F()          {return factory.sin( a ) ; }|	<COS> a = F()          {return factory.cos( a ) ; }|	<TAN> a = F()          {return factory.tan( a ) ; }|	<LN> a = F()           {return factory.ln( a ) ; }|	<EXP> a = F()          {return factory.exp( a ) ; }|	<PI>                   {return factory.constant( Math.PI ) ; }|	<E>                    {return factory.constant( Math.E ) ; }}TOKEN: { <UNEXPECTED_CHARACTER : ~[] > }